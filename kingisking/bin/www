#!/usr/bin/env node
// www 파일을 콘솔 명령어로 만들 때 이 주석을 사용한다. 

/**
 * Module dependencies.
 * 이하 세 가지 변수는 모듈을 불러온다.
 * 특히 debug는 콘솔에 로그를 남긴다.
 */

var app = require('../app');
var debug = require('debug')('kingisking:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 * 
 * process.env.PORT 객체에 값이 있다면 그 값을 사용하고,
 * 없다면 3000 포트이 이용된다.
 * 
 * app.set(키, 값) : 데이터를 저장 가능하다. 
 * 이후 app.get(키)로 데이터를 불러온다.
 * 
 * app.set('port', port)
 * 서버가 실행된 포트를 설정한다. 
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * http.createServer(app)에서 app 모듈은, 
 * createServer 메서드의 콜백 함수 역할을 한다.
 * 
 * 콜백 함수:
 * 특정 함수에 전달되어 특정 함수가 어떤 조건에 의해 호출하는 함수로
 * 이벤트 처리 같은 것을 할 때 사용 가능하다.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * http 웹 서버와 동일하게 listen한다.
 * 기존 서버를 구동하는 것과 동일하게 포트를 연결하고 서버를 실행한다.
 * 다만, express는 콜백 함수 부분을 기존과 다르게 "핸들링"한다.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
